<!DOCTYPE html>
<html lang="id">
<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Login - TukangCS</title>
  <style>
    body {
      margin: 0;
      font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
      background: linear-gradient(to bottom right, #111827, #581c87, #1e3a8a);
      color: white;
      min-height: 100vh;
      overflow-x: hidden;
    }

    .container {
      max-width: 600px;
      margin: 6rem auto;
      padding: 2rem;
      background: rgba(255, 255, 255, 0.05);
      backdrop-filter: blur(16px);
      border: 1px solid rgba(255, 255, 255, 0.1);
      border-radius: 1.5rem;
      box-shadow: 0 0 30px rgba(99, 102, 241, 0.2);
    }

    h1 {
      font-size: 2rem;
      text-align: center;
      margin-bottom: 1.5rem;
      background: linear-gradient(135deg, #8b5cf6, #6366f1);
      -webkit-background-clip: text;
      -webkit-text-fill-color: transparent;
    }

    form {
      display: flex;
      flex-direction: column;
      gap: 1rem;
    }

    input {
      padding: 0.75rem 1rem;
      border-radius: 0.75rem;
      border: none;
      background: rgba(255, 255, 255, 0.1);
      color: white;
      font-size: 1rem;
      border: 1px solid rgba(255, 255, 255, 0.2);
    }

    input::placeholder {
      color: rgba(255, 255, 255, 0.5);
    }

    input:focus {
      outline: none;
      border-color: #8b5cf6;
      box-shadow: 0 0 0 2px rgba(139, 92, 246, 0.5);
    }

    button {
      padding: 0.75rem 1rem;
      font-weight: bold;
      border: none;
      border-radius: 0.75rem;
      background: linear-gradient(135deg, #6366f1, #8b5cf6);
      color: white;
      cursor: pointer;
      transition: transform 0.3s ease, box-shadow 0.3s ease;
    }

    button:hover {
      transform: translateY(-2px);
      box-shadow: 0 8px 24px rgba(99, 102, 241, 0.4);
    }

    button:disabled {
      opacity: 0.6;
      cursor: not-allowed;
      transform: none;
    }

    .note {
      text-align: center;
      font-size: 0.9rem;
      color: #94a3b8;
      margin-top: 1rem;
    }

    .note a {
      color: #8b5cf6;
      text-decoration: underline;
    }

    .message {
      padding: 0.75rem;
      border-radius: 0.75rem;
      margin-bottom: 1rem;
      text-align: center;
      font-weight: bold;
    }

    .success {
      background: rgba(34, 197, 94, 0.2);
      border: 1px solid rgba(34, 197, 94, 0.3);
      color: #4ade80;
    }

    .error {
      background: rgba(239, 68, 68, 0.2);
      border: 1px solid rgba(239, 68, 68, 0.3);
      color: #f87171;
    }
  </style>
</head>
<body>
  <div class="container">
    <h1>Login</h1>
    <form id="login-form">
      <div id="message"></div>
      <input type="email" name="email" placeholder="Gmail" required />
      <input type="password" name="password" placeholder="Password" required />
      <button type="submit" id="submit-btn">Masuk</button>
    </form>
    <p class="note">Belum punya akun? <a href="/register">Daftar di sini</a></p>
  </div>

  <script>
    function showMessage(message: string, type: 'success' | 'error') {
      const messageDiv = document.getElementById('message');
      if (!messageDiv) return;
      
      messageDiv.innerHTML = `<div class="message ${type}">${message}</div>`;
      
      // Auto-hide success messages after 3 seconds
      if (type === 'success') {
        setTimeout(() => {
          messageDiv.innerHTML = '';
        }, 3000);
      }
    }

    // Check if user is already logged in
    function checkAuthStatus() {
      // You can implement this based on your auth strategy
      // For now, we'll just focus on the login process
    }

    // Handle Form Submission
    const loginForm = document.getElementById('login-form') as HTMLFormElement | null;
    loginForm?.addEventListener('submit', async (e) => {
      e.preventDefault();
      
      const submitBtn = document.getElementById('submit-btn');
      const form = loginForm; // Define the form variable
      const formData = new FormData(form);
      
      if (!submitBtn) return;
      
      (submitBtn as HTMLButtonElement).disabled = true;
      (submitBtn as HTMLButtonElement).disabled = true;
      submitBtn.textContent = 'Masuk...';
      
      try {
        // Try with FormData first (multipart/form-data)
        let response = await fetch('/api/login', {
          method: 'POST',
          body: formData
        });

        // If that fails, try with JSON
        if (!response.ok && response.status === 400) {
          const jsonData = {
            email: formData.get('email'),
            password: formData.get('password')
          };
          
          response = await fetch('/api/login', {
            method: 'POST',
            headers: {
              'Content-Type': 'application/json',
            },
            body: JSON.stringify(jsonData)
          });
        }
        
        const result = await response.json();
        
        if (response.ok) {
          showMessage('Login berhasil! Mengalihkan ke dashboard...', 'success');
          
          // Store session data if needed (in a real app, you might want to use secure cookies)
          if (result.session) {
            sessionStorage.setItem('auth_session', JSON.stringify(result.session));
            sessionStorage.setItem('user_data', JSON.stringify(result.user));
          }
          
          // Redirect to dashboard after successful login
          setTimeout(() => {
            window.location.href = '/dashboard';
          }, 1500);
        } else {
          showMessage(`Error: ${result.error}`, 'error');
        }
      } catch (error) {
        showMessage(`Network error: ${(error as Error).message}`, 'error');
        showMessage(`Network error: ${(error as Error).message}`, 'error');
        (submitBtn as HTMLButtonElement).disabled = false;
        (submitBtn as HTMLButtonElement).disabled = false;
        submitBtn.textContent = 'Masuk';
      }
    });

    // Initialize
    checkAuthStatus();
  </script>
</body>
</html>
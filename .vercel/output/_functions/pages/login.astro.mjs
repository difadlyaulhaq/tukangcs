import { c as createComponent, d as renderTemplate, a as renderComponent, r as renderHead } from '../chunks/astro/server_BmReEcGK.mjs';
import 'kleur/colors';
import { $ as $$Navbar, a as $$Footer } from '../chunks/footer_5O4tyabJ.mjs';
import 'clsx';
/* empty css                                 */
export { renderers } from '../renderers.mjs';

const $$LoginStyle = createComponent(($$result, $$props, $$slots) => {
  return renderTemplate``;
}, "D:/project/web/tukangcs/absent-accretion/src/components/styles/LoginStyle.astro", void 0);

var __freeze = Object.freeze;
var __defProp = Object.defineProperty;
var __template = (cooked, raw) => __freeze(__defProp(cooked, "raw", { value: __freeze(raw || cooked.slice()) }));
var _a;
const $$LoginScript = createComponent(async ($$result, $$props, $$slots) => {
  return renderTemplate(_a || (_a = __template(["//components/scripts/LoginScript.astro\n<script type=\"module\">\n  function showTab(tab) {\n    const tabLogin = document.getElementById('tab-login');\n    const tabRegister = document.getElementById('tab-register');\n    const formLogin = document.getElementById('form-login');\n    const formRegister = document.getElementById('form-register');\n    const loginMessage = document.getElementById('login-message');\n    const registerMessage = document.getElementById('register-message');\n\n    if (!tabLogin || !tabRegister || !formLogin || !formRegister) return;\n\n    // Clear messages\n    if (loginMessage) loginMessage.innerHTML = '';\n    if (registerMessage) registerMessage.innerHTML = '';\n\n    if (tab === 'login') {\n      tabLogin.classList.add('active');\n      tabRegister.classList.remove('active');\n      formLogin.classList.remove('hidden');\n      formRegister.classList.add('hidden');\n    } else {\n      tabLogin.classList.remove('active');\n      tabRegister.classList.add('active');\n      formLogin.classList.add('hidden');\n      formRegister.classList.remove('hidden');\n    }\n  }\n\n  function showMessage(elementId, message, type) {\n    const div = document.getElementById(elementId);\n    if (!div) return;\n    div.innerHTML = `<div class=\"message ${type}\">${message}</div>`;\n  }\n\n  function showLoading(buttonId, isLoading, originalText) {\n    const button = document.getElementById(buttonId);\n    if (!button) return;\n    button.disabled = isLoading;\n    button.innerHTML = isLoading ? `<span class=\"loading\"></span> ${originalText}...` : originalText;\n  }\n\n  // Login form logic\n  document.getElementById('form-login')?.addEventListener('submit', async (e) => {\n    e.preventDefault();\n    const form = new FormData(e.target);\n    const email = form.get('email')?.toString().trim();\n    const password = form.get('password')?.toString().trim();\n\n    if (!email || !password) {\n      showMessage('login-message', 'Email dan password wajib diisi.', 'error');\n      return;\n    }\n\n    showLoading('login-btn', true, 'Masuk');\n    try {\n      const res = await fetch('/api/login', {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify({ email, password }),\n      });\n      const data = await res.json();\n\n      if (res.ok && data.success) {\n        // Store session data in localStorage for client-side access\n        localStorage.setItem('firebase_session', JSON.stringify(data.session));\n        localStorage.setItem('firebase_user', JSON.stringify(data.user));\n        \n        showMessage('login-message', 'Login berhasil, mengalihkan...', 'success');\n        setTimeout(() => {\n          window.location.href = '/dashboard';\n        }, 1000);\n      } else {\n        showMessage('login-message', data.error || 'Login gagal', 'error');\n      }\n    } catch (err) {\n      console.error('Login error:', err);\n      showMessage('login-message', 'Gagal login, cek koneksi Anda.', 'error');\n    } finally {\n      showLoading('login-btn', false, 'Masuk');\n    }\n  });\n\n  // Register form logic\n  document.getElementById('form-register')?.addEventListener('submit', async (e) => {\n    e.preventDefault();\n    const form = new FormData(e.target);\n    const email = form.get('email')?.toString().trim();\n    const password = form.get('password')?.toString().trim();\n    const nama_umkm = form.get('nama_umkm')?.toString().trim();\n    const sektor = form.get('sektor')?.toString().trim();\n    const sosmedSelect = document.getElementById('sosmed');\n    const sosmed = sosmedSelect ? Array.from(sosmedSelect.selectedOptions).map(o => o.value) : [];\n\n    if (!email || !password || !nama_umkm || !sektor) {\n      showMessage('register-message', 'Semua field wajib diisi.', 'error');\n      return;\n    }\n\n    if (password.length < 6) {\n      showMessage('register-message', 'Password minimal 6 karakter.', 'error');\n      return;\n    }\n\n    showLoading('register-btn', true, 'Daftar Sekarang');\n    try {\n      const res = await fetch('/api/auth/register', {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify({ email, password, nama_umkm, sektor, sosmed }),\n      });\n      const data = await res.json();\n\n      if (res.ok && data.success) {\n        showMessage('register-message', data.message, 'success');\n        setTimeout(() => {\n          showTab('login');\n          e.target.reset();\n        }, 2000);\n      } else {\n        showMessage('register-message', data.error || 'Gagal registrasi', 'error');\n      }\n    } catch (err) {\n      console.error('Registration error:', err);\n      showMessage('register-message', 'Gagal registrasi, coba lagi.', 'error');\n    } finally {\n      showLoading('register-btn', false, 'Daftar Sekarang');\n    }\n  });\n\n  // Make showTab available globally\n  window.showTab = showTab;\n\n  // Session check - redirect if already logged in\n  document.addEventListener('DOMContentLoaded', () => {\n    const session = localStorage.getItem('firebase_session');\n    if (session) {\n      try {\n        const parsed = JSON.parse(session);\n        // Check if session is still valid\n        if (parsed.expires_at && parsed.expires_at * 1000 > Date.now()) {\n          window.location.href = '/dashboard';\n        } else {\n          // Session expired, clean up\n          localStorage.removeItem('firebase_session');\n          localStorage.removeItem('firebase_user');\n        }\n      } catch (error) {\n        // Invalid session data, clean up\n        localStorage.removeItem('firebase_session');\n        localStorage.removeItem('firebase_user');\n      }\n    }\n  });\n<\/script>"], ["//components/scripts/LoginScript.astro\n<script type=\"module\">\n  function showTab(tab) {\n    const tabLogin = document.getElementById('tab-login');\n    const tabRegister = document.getElementById('tab-register');\n    const formLogin = document.getElementById('form-login');\n    const formRegister = document.getElementById('form-register');\n    const loginMessage = document.getElementById('login-message');\n    const registerMessage = document.getElementById('register-message');\n\n    if (!tabLogin || !tabRegister || !formLogin || !formRegister) return;\n\n    // Clear messages\n    if (loginMessage) loginMessage.innerHTML = '';\n    if (registerMessage) registerMessage.innerHTML = '';\n\n    if (tab === 'login') {\n      tabLogin.classList.add('active');\n      tabRegister.classList.remove('active');\n      formLogin.classList.remove('hidden');\n      formRegister.classList.add('hidden');\n    } else {\n      tabLogin.classList.remove('active');\n      tabRegister.classList.add('active');\n      formLogin.classList.add('hidden');\n      formRegister.classList.remove('hidden');\n    }\n  }\n\n  function showMessage(elementId, message, type) {\n    const div = document.getElementById(elementId);\n    if (!div) return;\n    div.innerHTML = \\`<div class=\"message \\${type}\">\\${message}</div>\\`;\n  }\n\n  function showLoading(buttonId, isLoading, originalText) {\n    const button = document.getElementById(buttonId);\n    if (!button) return;\n    button.disabled = isLoading;\n    button.innerHTML = isLoading ? \\`<span class=\"loading\"></span> \\${originalText}...\\` : originalText;\n  }\n\n  // Login form logic\n  document.getElementById('form-login')?.addEventListener('submit', async (e) => {\n    e.preventDefault();\n    const form = new FormData(e.target);\n    const email = form.get('email')?.toString().trim();\n    const password = form.get('password')?.toString().trim();\n\n    if (!email || !password) {\n      showMessage('login-message', 'Email dan password wajib diisi.', 'error');\n      return;\n    }\n\n    showLoading('login-btn', true, 'Masuk');\n    try {\n      const res = await fetch('/api/login', {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify({ email, password }),\n      });\n      const data = await res.json();\n\n      if (res.ok && data.success) {\n        // Store session data in localStorage for client-side access\n        localStorage.setItem('firebase_session', JSON.stringify(data.session));\n        localStorage.setItem('firebase_user', JSON.stringify(data.user));\n        \n        showMessage('login-message', 'Login berhasil, mengalihkan...', 'success');\n        setTimeout(() => {\n          window.location.href = '/dashboard';\n        }, 1000);\n      } else {\n        showMessage('login-message', data.error || 'Login gagal', 'error');\n      }\n    } catch (err) {\n      console.error('Login error:', err);\n      showMessage('login-message', 'Gagal login, cek koneksi Anda.', 'error');\n    } finally {\n      showLoading('login-btn', false, 'Masuk');\n    }\n  });\n\n  // Register form logic\n  document.getElementById('form-register')?.addEventListener('submit', async (e) => {\n    e.preventDefault();\n    const form = new FormData(e.target);\n    const email = form.get('email')?.toString().trim();\n    const password = form.get('password')?.toString().trim();\n    const nama_umkm = form.get('nama_umkm')?.toString().trim();\n    const sektor = form.get('sektor')?.toString().trim();\n    const sosmedSelect = document.getElementById('sosmed');\n    const sosmed = sosmedSelect ? Array.from(sosmedSelect.selectedOptions).map(o => o.value) : [];\n\n    if (!email || !password || !nama_umkm || !sektor) {\n      showMessage('register-message', 'Semua field wajib diisi.', 'error');\n      return;\n    }\n\n    if (password.length < 6) {\n      showMessage('register-message', 'Password minimal 6 karakter.', 'error');\n      return;\n    }\n\n    showLoading('register-btn', true, 'Daftar Sekarang');\n    try {\n      const res = await fetch('/api/auth/register', {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify({ email, password, nama_umkm, sektor, sosmed }),\n      });\n      const data = await res.json();\n\n      if (res.ok && data.success) {\n        showMessage('register-message', data.message, 'success');\n        setTimeout(() => {\n          showTab('login');\n          e.target.reset();\n        }, 2000);\n      } else {\n        showMessage('register-message', data.error || 'Gagal registrasi', 'error');\n      }\n    } catch (err) {\n      console.error('Registration error:', err);\n      showMessage('register-message', 'Gagal registrasi, coba lagi.', 'error');\n    } finally {\n      showLoading('register-btn', false, 'Daftar Sekarang');\n    }\n  });\n\n  // Make showTab available globally\n  window.showTab = showTab;\n\n  // Session check - redirect if already logged in\n  document.addEventListener('DOMContentLoaded', () => {\n    const session = localStorage.getItem('firebase_session');\n    if (session) {\n      try {\n        const parsed = JSON.parse(session);\n        // Check if session is still valid\n        if (parsed.expires_at && parsed.expires_at * 1000 > Date.now()) {\n          window.location.href = '/dashboard';\n        } else {\n          // Session expired, clean up\n          localStorage.removeItem('firebase_session');\n          localStorage.removeItem('firebase_user');\n        }\n      } catch (error) {\n        // Invalid session data, clean up\n        localStorage.removeItem('firebase_session');\n        localStorage.removeItem('firebase_user');\n      }\n    }\n  });\n<\/script>"])));
}, "D:/project/web/tukangcs/absent-accretion/src/components/scripts/LoginScript.astro", void 0);

const $$Login = createComponent(($$result, $$props, $$slots) => {
  return renderTemplate`<html lang="id"> <head><meta charset="UTF-8"><meta name="viewport" content="width=device-width, initial-scale=1.0"><title>Login - TukangCS</title>${renderComponent($$result, "LoginStyle", $$LoginStyle, {})}${renderHead()}</head> <body> ${renderComponent($$result, "Navbar", $$Navbar, {})} <div class="container"> <h1>Login</h1> <form id="login-form"> <div id="message"></div> <input type="email" name="email" placeholder="Gmail" required> <input type="password" name="password" placeholder="Password" required> <button type="submit" id="submit-btn">Masuk</button> </form> <p class="note">Belum punya akun? <a href="/register">Daftar di sini</a></p> </div> ${renderComponent($$result, "Footer", $$Footer, {})} ${renderComponent($$result, "LoginScript", $$LoginScript, {})} </body></html>`;
}, "D:/project/web/tukangcs/absent-accretion/src/pages/login.astro", void 0);

const $$file = "D:/project/web/tukangcs/absent-accretion/src/pages/login.astro";
const $$url = "/login";

const _page = /*#__PURE__*/Object.freeze(/*#__PURE__*/Object.defineProperty({
  __proto__: null,
  default: $$Login,
  file: $$file,
  url: $$url
}, Symbol.toStringTag, { value: 'Module' }));

const page = () => _page;

export { page };

import { c as createComponent, d as renderTemplate, a as renderComponent, r as renderHead } from '../chunks/astro/server_Bbe2uEvn.mjs';
import 'kleur/colors';
import { $ as $$Navbar, a as $$Footer } from '../chunks/footer_CBnApD6v.mjs';
import 'clsx';
/* empty css                                       */
export { renderers } from '../renderers.mjs';

var __freeze = Object.freeze;
var __defProp = Object.defineProperty;
var __template = (cooked, raw) => __freeze(__defProp(cooked, "raw", { value: __freeze(raw || cooked.slice()) }));
var _a;
const $$GetStartedScript = createComponent(async ($$result, $$props, $$slots) => {
  return renderTemplate(_a || (_a = __template(["//components/scripts/LoginScript.astro\n<script type=\"module\">\n  function showTab(tab) {\n    const tabLogin = document.getElementById('tab-login');\n    const tabRegister = document.getElementById('tab-register');\n    const formLogin = document.getElementById('form-login');\n    const formRegister = document.getElementById('form-register');\n    const loginMessage = document.getElementById('login-message');\n    const registerMessage = document.getElementById('register-message');\n\n    if (!tabLogin || !tabRegister || !formLogin || !formRegister) return;\n\n    loginMessage.innerHTML = '';\n    registerMessage.innerHTML = '';\n\n    if (tab === 'login') {\n      tabLogin.classList.add('active');\n      tabRegister.classList.remove('active');\n      formLogin.classList.remove('hidden');\n      formRegister.classList.add('hidden');\n    } else {\n      tabLogin.classList.remove('active');\n      tabRegister.classList.add('active');\n      formLogin.classList.add('hidden');\n      formRegister.classList.remove('hidden');\n    }\n  }\n\n  function showMessage(elementId, message, type) {\n    const div = document.getElementById(elementId);\n    if (!div) return;\n    div.innerHTML = `<div class=\"message ${type}\">${message}</div>`;\n  }\n\n  function showLoading(buttonId, isLoading, originalText) {\n    const button = document.getElementById(buttonId);\n    if (!button) return;\n    button.disabled = isLoading;\n    button.innerHTML = isLoading ? `<span class=\"loading\"></span>${originalText}` : originalText;\n  }\n\n  // Login form logic\n  document.getElementById('form-login')?.addEventListener('submit', async (e) => {\n    e.preventDefault();\n    const form = new FormData(e.target);\n    const email = form.get('email')?.toString().trim();\n    const password = form.get('password')?.toString().trim();\n\n    if (!email || !password) {\n      showMessage('login-message', 'Email dan password wajib diisi.', 'error');\n      return;\n    }\n\n    showLoading('login-btn', true, 'Masuk');\n    try {\n      const res = await fetch('/api/auth/login', {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify({ email, password }),\n      });\n      const data = await res.json();\n\n      if (res.ok && data.success) {\n        localStorage.setItem('supabase_session', JSON.stringify(data.session));\n        localStorage.setItem('supabase_user', JSON.stringify(data.user));\n        showMessage('login-message', 'Login berhasil, mengalihkan...', 'success');\n        setTimeout(() => location.href = '/dashboard', 1000);\n      } else {\n        showMessage('login-message', data.error || 'Login gagal', 'error');\n      }\n    } catch (err) {\n      showMessage('login-message', 'Gagal login, cek koneksi Anda.', 'error');\n    } finally {\n      showLoading('login-btn', false, 'Masuk');\n    }\n  });\n\n  // Register form logic\n  document.getElementById('form-register')?.addEventListener('submit', async (e) => {\n    e.preventDefault();\n    const form = new FormData(e.target);\n    const email = form.get('email')?.toString().trim();\n    const password = form.get('password')?.toString().trim();\n    const nama_umkm = form.get('nama_umkm')?.toString().trim();\n    const sektor = form.get('sektor')?.toString().trim();\n    const sosmed = Array.from(document.getElementById('sosmed')?.selectedOptions || []).map(o => o.value);\n\n    if (!email || !password || !nama_umkm || !sektor) {\n      showMessage('register-message', 'Semua field wajib diisi.', 'error');\n      return;\n    }\n\n    showLoading('register-btn', true, 'Daftar Sekarang');\n    try {\n      const res = await fetch('/api/auth/register', {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify({ email, password, nama_umkm, sektor, sosmed }),\n      });\n      const data = await res.json();\n\n      if (res.ok && data.success) {\n        showMessage('register-message', data.message, 'success');\n        setTimeout(() => showTab('login'), 2000);\n        e.target.reset();\n      } else {\n        showMessage('register-message', data.error || 'Gagal registrasi', 'error');\n      }\n    } catch (err) {\n      showMessage('register-message', 'Gagal registrasi, coba lagi.', 'error');\n    } finally {\n      showLoading('register-btn', false, 'Daftar Sekarang');\n    }\n  });\n\n  window.showTab = showTab;\n\n  // Session check\n  document.addEventListener('DOMContentLoaded', () => {\n    const session = localStorage.getItem('supabase_session');\n    if (session) {\n      try {\n        const parsed = JSON.parse(session);\n        if (parsed.expires_at && new Date(parsed.expires_at * 1000) > new Date()) {\n          window.location.href = '/dashboard';\n        }\n      } catch {\n        localStorage.removeItem('supabase_session');\n        localStorage.removeItem('supabase_user');\n      }\n    }\n  });\n<\/script>"], ["//components/scripts/LoginScript.astro\n<script type=\"module\">\n  function showTab(tab) {\n    const tabLogin = document.getElementById('tab-login');\n    const tabRegister = document.getElementById('tab-register');\n    const formLogin = document.getElementById('form-login');\n    const formRegister = document.getElementById('form-register');\n    const loginMessage = document.getElementById('login-message');\n    const registerMessage = document.getElementById('register-message');\n\n    if (!tabLogin || !tabRegister || !formLogin || !formRegister) return;\n\n    loginMessage.innerHTML = '';\n    registerMessage.innerHTML = '';\n\n    if (tab === 'login') {\n      tabLogin.classList.add('active');\n      tabRegister.classList.remove('active');\n      formLogin.classList.remove('hidden');\n      formRegister.classList.add('hidden');\n    } else {\n      tabLogin.classList.remove('active');\n      tabRegister.classList.add('active');\n      formLogin.classList.add('hidden');\n      formRegister.classList.remove('hidden');\n    }\n  }\n\n  function showMessage(elementId, message, type) {\n    const div = document.getElementById(elementId);\n    if (!div) return;\n    div.innerHTML = \\`<div class=\"message \\${type}\">\\${message}</div>\\`;\n  }\n\n  function showLoading(buttonId, isLoading, originalText) {\n    const button = document.getElementById(buttonId);\n    if (!button) return;\n    button.disabled = isLoading;\n    button.innerHTML = isLoading ? \\`<span class=\"loading\"></span>\\${originalText}\\` : originalText;\n  }\n\n  // Login form logic\n  document.getElementById('form-login')?.addEventListener('submit', async (e) => {\n    e.preventDefault();\n    const form = new FormData(e.target);\n    const email = form.get('email')?.toString().trim();\n    const password = form.get('password')?.toString().trim();\n\n    if (!email || !password) {\n      showMessage('login-message', 'Email dan password wajib diisi.', 'error');\n      return;\n    }\n\n    showLoading('login-btn', true, 'Masuk');\n    try {\n      const res = await fetch('/api/auth/login', {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify({ email, password }),\n      });\n      const data = await res.json();\n\n      if (res.ok && data.success) {\n        localStorage.setItem('supabase_session', JSON.stringify(data.session));\n        localStorage.setItem('supabase_user', JSON.stringify(data.user));\n        showMessage('login-message', 'Login berhasil, mengalihkan...', 'success');\n        setTimeout(() => location.href = '/dashboard', 1000);\n      } else {\n        showMessage('login-message', data.error || 'Login gagal', 'error');\n      }\n    } catch (err) {\n      showMessage('login-message', 'Gagal login, cek koneksi Anda.', 'error');\n    } finally {\n      showLoading('login-btn', false, 'Masuk');\n    }\n  });\n\n  // Register form logic\n  document.getElementById('form-register')?.addEventListener('submit', async (e) => {\n    e.preventDefault();\n    const form = new FormData(e.target);\n    const email = form.get('email')?.toString().trim();\n    const password = form.get('password')?.toString().trim();\n    const nama_umkm = form.get('nama_umkm')?.toString().trim();\n    const sektor = form.get('sektor')?.toString().trim();\n    const sosmed = Array.from(document.getElementById('sosmed')?.selectedOptions || []).map(o => o.value);\n\n    if (!email || !password || !nama_umkm || !sektor) {\n      showMessage('register-message', 'Semua field wajib diisi.', 'error');\n      return;\n    }\n\n    showLoading('register-btn', true, 'Daftar Sekarang');\n    try {\n      const res = await fetch('/api/auth/register', {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify({ email, password, nama_umkm, sektor, sosmed }),\n      });\n      const data = await res.json();\n\n      if (res.ok && data.success) {\n        showMessage('register-message', data.message, 'success');\n        setTimeout(() => showTab('login'), 2000);\n        e.target.reset();\n      } else {\n        showMessage('register-message', data.error || 'Gagal registrasi', 'error');\n      }\n    } catch (err) {\n      showMessage('register-message', 'Gagal registrasi, coba lagi.', 'error');\n    } finally {\n      showLoading('register-btn', false, 'Daftar Sekarang');\n    }\n  });\n\n  window.showTab = showTab;\n\n  // Session check\n  document.addEventListener('DOMContentLoaded', () => {\n    const session = localStorage.getItem('supabase_session');\n    if (session) {\n      try {\n        const parsed = JSON.parse(session);\n        if (parsed.expires_at && new Date(parsed.expires_at * 1000) > new Date()) {\n          window.location.href = '/dashboard';\n        }\n      } catch {\n        localStorage.removeItem('supabase_session');\n        localStorage.removeItem('supabase_user');\n      }\n    }\n  });\n<\/script>"])));
}, "D:/project/web/tukangcs/absent-accretion/src/components/scripts/GetStartedScript.astro", void 0);

const $$GetStartedStyle = createComponent(($$result, $$props, $$slots) => {
  return renderTemplate``;
}, "D:/project/web/tukangcs/absent-accretion/src/components/styles/GetStartedStyle.astro", void 0);

const $$GetStarted = createComponent(($$result, $$props, $$slots) => {
  return renderTemplate`<html lang="id"> <head><meta charset="UTF-8"><meta name="viewport" content="width=device-width, initial-scale=1.0"><title>Get Started - TukangCS</title>${renderComponent($$result, "GetStartedStyle", $$GetStartedStyle, {})}${renderHead()}</head> <body> ${renderComponent($$result, "Navbar", $$Navbar, {})} <div class="container"> <h1>Get Started</h1> <div class="tabs"> <button class="tab active" id="tab-login" onclick="showTab('login')">Login</button> <button class="tab" id="tab-register" onclick="showTab('register')">Register</button> </div> <!-- Login Form --> <form id="form-login"> <div id="login-message"></div> <input type="email" name="email" placeholder="Email" required> <input type="password" name="password" placeholder="Password" required> <button type="submit" id="login-btn">Masuk</button> <p class="note">Belum punya akun? Klik tab Register di atas</p> </form> <!-- Register Form --> <form id="form-register" class="hidden"> <div id="register-message"></div> <input type="text" name="nama_umkm" placeholder="Nama Perusahaan / UMKM" required> <input type="email" name="email" placeholder="Email" required> <input type="password" name="password" placeholder="Password (minimal 6 karakter)" required minlength="6"> <input type="text" name="sektor" placeholder="Sektor Usaha (contoh: F&B, Fashion, etc.)" required> <label for="sosmed">Platform Sosial Media yang Ingin Dihubungkan (opsional):</label> <select id="sosmed" name="sosmed" multiple size="4"> <option value="whatsapp">WhatsApp</option> <option value="telegram">Telegram</option> <option value="instagram">Instagram</option> <option value="facebook">Facebook</option> </select> <button type="submit" id="register-btn">Daftar Sekarang</button> <p class="note">Sudah punya akun? Klik tab Login di atas</p> </form> </div> ${renderComponent($$result, "Footer", $$Footer, {})} ${renderComponent($$result, "GetStartedScript", $$GetStartedScript, {})} </body></html>`;
}, "D:/project/web/tukangcs/absent-accretion/src/pages/get-started.astro", void 0);

const $$file = "D:/project/web/tukangcs/absent-accretion/src/pages/get-started.astro";
const $$url = "/get-started";

const _page = /*#__PURE__*/Object.freeze(/*#__PURE__*/Object.defineProperty({
  __proto__: null,
  default: $$GetStarted,
  file: $$file,
  url: $$url
}, Symbol.toStringTag, { value: 'Module' }));

const page = () => _page;

export { page };
